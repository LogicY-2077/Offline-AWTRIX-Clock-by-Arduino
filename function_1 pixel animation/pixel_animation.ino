#include <Wire.h>

//*************LED Matrix***************
#include <Adafruit_GFX.h>
#include <Adafruit_NeoMatrix.h>
#include <Adafruit_NeoPixel.h>

#include <Fonts/forAWTRIX.h>
#ifndef PSTR
#define PSTR // Make Arduino Due happy
#endif

#define PIN 0//u can use ur own pin definition

Adafruit_NeoMatrix matrix = Adafruit_NeoMatrix(32, 8, PIN,
                            NEO_MATRIX_TOP     + NEO_MATRIX_LEFT +
                            NEO_MATRIX_COLUMNS + NEO_MATRIX_ZIGZAG,
                            NEO_GRB            + NEO_KHZ800);

static const uint16_t flash[] = 
{
0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xFFFF, 0x5EFF, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xFFFF, 0x5EFF, 0x8AFF, 0x0000,   // 0x0010 (16) pixels
0x0000, 0x0000, 0x0000, 0xFFFF, 0x5EFF, 0x8AFF, 0x0000, 0x0000, 0x0000, 0x0000, 0xFFFF, 0x5EFF, 0x8AFF, 0x0000, 0x0000, 0x0000,   // 0x0020 (32) pixels
0x0000, 0x0000, 0x5EFF, 0x5EFF, 0x5EFF, 0x5EFF, 0x8AFF, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x5EFF, 0x8AFF, 0x0000, 0x0000,   // 0x0030 (48) pixels
0x0000, 0x0000, 0xFFFF, 0x5EFF, 0x8AFF, 0x0000, 0x0000, 0x0000, 0x0000, 0xFFFF, 0x5EFF, 0x8AFF, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x0040 (64) pixels
};

static const uint16_t big_rain[] = 
{
0x0000, 0x0000, 0x0000, 0x07FF, 0x07FF, 0x07FF, 0x0000, 0x0000, 0x0000, 0x0000, 0x07FF, 0x0000, 0x0000, 0x0000, 0x07FF, 0x0000,   // 0x0010 (16) pixels
0x0000, 0x07FF, 0x07FF, 0x0000, 0x0000, 0x0000, 0x0000, 0x07FF, 0x07FF, 0x0000, 0x0000, 0x07FF, 0x07FF, 0x0000, 0x07FF, 0x07FF,   // 0x0020 (32) pixels
0x0000, 0x07FF, 0x07FF, 0x0000, 0x07FF, 0x07FF, 0x0000, 0x0000, 0x0000, 0x0000, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 0x0000, 0xFFFF,   // 0x0030 (48) pixels
0x0000, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 0x0000,   // 0x0040 (64) pixels
};
static const uint16_t rainy_sun[] = 
{
0x0000, 0x0000, 0xFE60, 0xFE60, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xFE60, 0x0000, 0x07FF, 0xFE60, 0x0000, 0x0000, 0x0000,   // 0x0010 (16) pixels
0x0000, 0xFE60, 0x07FF, 0x0000, 0x07FF, 0x07FF, 0x07FF, 0x0000, 0x07FF, 0x07FF, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x07FF,   // 0x0020 (32) pixels
0x07FF, 0x0000, 0x0000, 0x07FF, 0x07FF, 0x0000, 0x07FF, 0x0000, 0x0000, 0x07FF, 0x07FF, 0x0000, 0x0000, 0xFFFF, 0x0000, 0x0000,   // 0x0030 (48) pixels
0x0000, 0x0000, 0x0000, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 0x0000, 0x0000, 0x0000,   // 0x0040 (64) pixels
};

static const uint16_t rainbow[] = 
{
0x4000, 0x0000, 0x7800, 0x7800, 0x0000, 0xF800, 0xF800, 0xF800, 0x0000, 0x4920, 0x79E0, 0x0000, 0x79E0, 0xFBE0, 0xFBE0, 0xFBE0,   // 0x0010 (16) pixels
0x4A40, 0x0000, 0x8C40, 0x8C40, 0xFFA0, 0xFFA0, 0xFFA0, 0xFFA0, 0x19E0, 0x0000, 0x4400, 0x4400, 0x0000, 0x7FE0, 0x7FE0, 0x7FE0,   // 0x0020 (32) pixels
0x0206, 0x03ED, 0x0000, 0x03ED, 0x07FA, 0x07FA, 0x07FA, 0x07FA, 0x0000, 0x00A7, 0x014F, 0x0000, 0x014F, 0x02DF, 0x02DF, 0x02DF,   // 0x0030 (48) pixels
0x0000, 0x1806, 0x0000, 0x380F, 0x380F, 0x801F, 0x801F, 0x801F, 0x3006, 0x0000, 0x780F, 0x780F, 0x0000, 0xF81F, 0xF81F, 0xF81F,   // 0x0040 (64) pixels
};

static const uint16_t sun1[] = 
{
0x0000, 0x0000, 0x0000, 0xFE80, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x0010 (16) pixels
0xFE80, 0x0000, 0x0000, 0xFE80, 0xFE80, 0x0000, 0x0000, 0xFE80, 0x0000, 0x0000, 0xFE80, 0x0000, 0x0000, 0xFE80, 0x0000, 0x0000,   // 0x0020 (32) pixels
0x0000, 0x0000, 0xFE80, 0x0000, 0x0000, 0xFE80, 0x0000, 0xFE80, 0xFE80, 0x0000, 0x0000, 0xFE80, 0xFE80, 0x0000, 0x0000, 0x0000,   // 0x0030 (48) pixels
0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xFE80, 0x0000, 0x0000, 0xFE80, 0x0000, 0x0000,   // 0x0040 (64) pixels
};

static const uint16_t sun2[] = 
{
0x0000, 0x0000, 0xFE80, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xFE80, 0x0000,   // 0x0010 (16) pixels
0xFE80, 0x0000, 0x0000, 0xFE80, 0xFE80, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xFE80, 0x0000, 0x0000, 0xFE80, 0x0000, 0x0000,   // 0x0020 (32) pixels
0x0000, 0x0000, 0xFE80, 0x0000, 0x0000, 0xFE80, 0x0000, 0xFE80, 0xFE80, 0x0000, 0x0000, 0xFE80, 0xFE80, 0x0000, 0x0000, 0x0000,   // 0x0030 (48) pixels
0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xFE80, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x0040 (64) pixels
};

static const uint16_t sun3[] = 
{
0x0000, 0x0000, 0x0000, 0xFE80, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xFE80, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x0010 (16) pixels
0x0000, 0x0000, 0x0000, 0xFE80, 0xFE80, 0x0000, 0x0000, 0xFE80, 0x0000, 0x0000, 0xFE80, 0x0000, 0x0000, 0xFE80, 0x0000, 0x0000,   // 0x0020 (32) pixels
0xFE80, 0x0000, 0xFE80, 0x0000, 0x0000, 0xFE80, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xFE80, 0xFE80, 0x0000, 0x0000, 0xFE80,   // 0x0030 (48) pixels
0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xFE80, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x0040 (64) pixels
};



void setup() {
  //**********Genegal************
  Serial.begin(9600);

  //**********LED Matrix*********
  matrix.begin();
  matrix.setTextWrap(false);
  matrix.setFont(&forAWTRIX);
  matrix.setBrightness(10);
}
  


void loop() {
  
    for (int i=0; i <4; i++)
    {
      matrix.fillScreen(0);
        matrix.drawRGBBitmap(8, 0,  flash, 8,  8);
        matrix.show();
        delay(100);
        matrix.fillScreen(0);
        matrix.show();
        delay(100);
      }
      
    delay(200);
    
    for (int i=-8; i <9; i++)
    {
      matrix.fillScreen(0);
      matrix.drawRGBBitmap(3, i,  flash ,8,  8);
      matrix.show();
      delay(40);
    }

    delay(200);

    for (int i=-8; i <9; i++)
    {
      matrix.fillScreen(0);
      matrix.drawRGBBitmap(18, i,  flash ,8,  8);
      matrix.show();
      delay(40);
    }

    delay(200);

    for (int i=0; i <32; i++)
    {
      matrix.fillScreen(0);
      matrix.drawRGBBitmap(i, 0,  big_rain,8,  8);
      matrix.show();
      delay(180);
    }

    

    for (int i=31; i >=0; i--)
    {
      matrix.fillScreen(0);
      matrix.drawRGBBitmap(i, 0, rainy_sun,8,  8);
      matrix.show();
      delay(250);
    }


    for (int i=0; i <32; i++)
    {
      matrix.fillScreen(0);
      matrix.drawRGBBitmap(i, 0,  rainbow,8,  8);
      matrix.show();
      delay(80);
    }

    for (int i=0; i <10; i++)
    {
      matrix.fillScreen(0);
      matrix.drawRGBBitmap(11, 0, sun1,8,  8);
      matrix.show();
      delay(80);
      matrix.fillScreen(0);
      matrix.drawRGBBitmap(11, 0, sun2,8,  8);
      matrix.show();
      delay(80);
      matrix.fillScreen(0);
      matrix.drawRGBBitmap(11, 0, sun3,8,  8);
      matrix.show();
      delay(80);
    }
    matrix.fillScreen(0);
     matrix.show();
    delay(1000);
}
